揮発性の ExXXXXX と ExAllocator と Environment を整理する。
	ドキュメント化
	特に Environment の位置づけは明確にする必要がある。
--------------------------------------
Token は ' がでたら QUOTE に変換すべき
	SimpleTokenReader の normalize_token_str で強引に実現
	Token.cpp に const QUOTE などでつくった。
	が SimpleTokenReader で RCPointer を使っているため使えない。
	RCPointer でフリーしようと数ると const QUOTE はフリー出来なくて
	矛盾を起こす
--------------------------------------
Symbol を事前登録できない
	QUOTE とかのシンボルは事前に登録すべき
	しかも誰からも差されていなくてもフリーされてはいけない。
	つまり gc 対象外
	この txt の下の方に Symbol の gc についてかかれている。
	それと矛盾する。かたや、gc されてはいけない。かたや gc したい。

--------------------------------------
+ symbol サーチのニブンギ
	-> やるなら lisp 内でやる必要がある。
	とうめんいらない

--------------------------------------
new をつかってはいけない。
	-> SReader で使った。ゆるす。lisp の世界じゃないから

--------------------------------------
gc 時に軽い lock と必須 lock をする。
	軽い lock は通常はなにもしない
		マルチスレッド化したときに atomic な排他処理をする
		つまり軽い lock は頻繁によばれるところにする。
		頻繁に呼ばれるけどたぶん gc にひっかからないところ。
	必須 lock は
		絶対に gc しちゃだめなところ
	gc の場所は通常は
		頻繁に呼ばれない。gc しても安全なところ。
		たとえば read の最初とか
		うまく procedure の前とか

		かるい lock がパーフェクトなら
		gc はどこでもしてもよい。
		しかし、それだとかるいlock が性能を引き下げるので
		通常は gc は特定の場所のみ。
		マルチスレッドで効果が上がると考えられる場合のみ
		リコンパイルして かるいlock を有効にする。
--------------------------------------
Symbol を root からキャッシュしている
	毎回 Symbol を作ると同じシンボルで違うアドレスのものが
	多数できる。
	しかし、今の方式だと使っていない Symbol も永遠に残る。
		=> Symbol の圧縮が必要。
		gc 時に環境にない Symbol は gc で持ちこさないようにする？
		それとも gc 時に、一回シンボルのトップを切って、
			gc をする。
			gc の後に
			最後に旧シンボルリストから持ち越されたものだけを
			再度つなげばきれいに Symbol も gc されるはず、、、
			
--------------------------------------
symbol とか symbol & value のアクセスの高速化
	単純なリストなので、だんだん遅くなるだろう

+ mem の領域管理(最初から倍とってしまえばよい)
	で、lowater を超えるたびに右に左に移動させる。
	X alloc で超えてしまったときは倍の中を使う。-> 複雑だからやらない
	そして gc のタイミングを待つ。

	継続を使いスタックの中身まで外にだし、 gc の対象にすれば
	いつやっても大丈夫
